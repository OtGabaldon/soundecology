
wsurf::RegisterPlugin SCM \
    -description "This plug-in provides a rapid way to process sound files and to extract information about sound patterns like frequencies, intensity e structural complexity across frequency's categories" \
    -propertiespageproc     BACI::propertyPane \
    -addmenuentriesproc     BACI::addMenuEntries 
# -----------------------------------------------------------------------------

namespace eval BACI {
        #matrice spettogramma-GLOBALE
	variable val 
	#Valori di default
	variable parBaci
	set parBaci	[list 	\
			tStart  00:00.00    \
			tEnd    -1 	    \
			frStart 0 	    \
			frEnd   -1	    \
			overlap 0	    \
                        tInt    5           \
                        filtro  0           \
                        distInt 0           \
                        random  0           \
                        nRand   0           \
                        classiLev 70        \
                        sampleL 20          \
                        sampleD 0           \
		 	]
	
	
	variable agg     
              
	#carico valori di default in agg
	foreach {key default} $parBaci {
		set [namespace current]::agg($key) $default
		
	}       
        
} 

# ----------------------------------------------------------------------------

#aggiungo opzione "calcola baci" al menu
proc BACI::addMenuEntries {w pane m hook x y} {
      
    if {[string match query $hook]} {
        return 1
    }
    if {[string match main $hook]} {
        upvar wsurf::analysis::${pane}::var v
        upvar [namespace current]::agg a
        
        if {$v(drawSpectrogram)} {
            $m add command -label "Compute SCM" -command [namespace code [list preCalcolo $w $pane]]
            $m add command -label "Compute SCM multiple files" -command [namespace code [list piuFile $w $pane]]
            $m add command -label "Compute SCM multiple sample files " -command [namespace code [list piuFileCampionati $w $pane $a(sampleL) $a(sampleD)]]
            #$m add command -label "Compute Levenshtein Distance" -command [namespace code [list distanzaLevenshtein]]
            }
        }
}
#aggiungo panello proprieta di BACI
proc BACI::propertyPane {w pane} {
 	if {$pane==""} return
 	
 	upvar wsurf::analysis::${pane}::var v
 	#upvar [namespace current]::agg a

 	set ret {}
 	if {$v(drawSpectrogram)} {
  		lappend ret [::util::mc "SCM"] BACI::drawBaci 
  	}
        
  	
}
#costruzione pannello proprieta di BACI
proc BACI::drawBaci {w pane p} {
        
        ######################################  
        # set wsurf::analysis::${pane}::var(t,fftlen) 512
        set wsurf::analysis::${pane}::var(t,preemph) 0
        
        ##set wsurf::analysis::${pane}::var(t,winlen) 512  
        #######################################à
        
    #	stringPropItem $p.f1 "FFT window length:" 21 6 \
    # 	"points" wsurf::analysis::${pane}::var(t,fftlen)
    # 	stringPropItem $p.f2 "Window " 21 6 \
    # 	"points" wsurf::analysis::${pane}::var(t,winlen)
     	stringPropItem $p.f3 "Start time:" 21 10 \
     	"mm:ss.ms" [namespace current]::agg(tStart)
     	stringPropItem $p.f4 "End time:" 21 10 \
     	"mm:ss.ms" [namespace current]::agg(tEnd)
     	stringPropItem $p.f5 "Lowest frequency:" 21 6 \
     	"Hz" [namespace current]::agg(frStart)
     	stringPropItem $p.f6 "Highest frequency:" 21 6 \
     	"Hz" [namespace current]::agg(frEnd)
        
        stringPropItem $p.f8 "Clumping:" 21 6 \
     	"sec" [namespace current]::agg(tInt)
        stringPropItem $p.f9 "Noise filter:" 21 6 \
     	"" [namespace current]::agg(filtro)
        stringPropItem $p.f10 "Inter-clump distance:" 21 6 \
         "sec" [namespace current]::agg(distInt)
        booleanPropItem $p.f11 "Random" "" \
        [namespace current]::agg(random)
        stringPropItem $p.f12 "Number of cases:" 21 6 \
         "" [namespace current]::agg(nRand)
        stringPropItem $p.f14 "Sample size:" 21 6 \
         "sec" [namespace current]::agg(sampleL)
        stringPropItem $p.f15 "Inter-sample distance:" 21 6 \
         "sec" [namespace current]::agg(sampleD)
        
        stringPropItem $p.f13 "Levenshtein classes:" 21 6 \
         "" [namespace current]::agg(classiLev)
        

}


proc BACI::preCalcolo {w pane} {
    
    set snd [$w cget -sound]
    set sndf [$snd cget -file]
    [namespace current]::calcoloBaci $w $snd $pane [lappend lista $sndf]
    
}

proc BACI::calcoloBaci {w snd pane listaFile} {
    
        #matrice spettogramma
	variable val        
        #Carico variabili globali
	upvar wsurf::analysis::${pane}::var v
	upvar [namespace current]::agg a
        
        
        load Scmlib.dll
        
        set dd [open "parametri.txt" w+ ];#reset
        close $dd
        
        #set splash [toplevel .splash -relief raised -bd 0 -padx 75 -pady 25 ]
        #wm title .splash Completamento
        #set perc [label .splash.perc -text "0% completato"]
        #pack $perc
        #
        Scmlib
      
        
        #destroy .splash
    
        
       	
}

#funzione che ricava classe da frequenza
proc BACI::freqToClass  {freq snd fftlen} {
    
    #ricavo frequenza di campionamento
    set rate [$snd cget -rate]
    #ritorno classe frequenza corrispondente
    return [expr (($freq * $fftlen) / $rate  ) ]
    
}

#converte stringa tempo in msec
proc BACI::strTimeToMs {str} {
    #estraggo min sec e ms dalla stringa di tipo min:sec.ms
    set min [string range $str 0 [expr [string first : $str] - 1]]
    set sec [string range $str [expr [string first : $str] + 1] [expr [string first . $str] - 1]]
    set ms  [string range $str [expr [string first . $str] + 1] [expr [string length $str] - 1]]
    
    #problema ottale#
    if {$sec == "09"} {
        set sec 9
    }
    if {$sec == "08"} {
        set sec 8
    }
    #ritorno il numero di secondi
    return [expr ((($min * 60) + $sec)  ) + ($ms / 1000.0 )]             
}
#ricava lo slot orario corrispondente ai secondi passati
proc BACI::timeBins {tm snd fftlen} {
    #ricavo frequenza di campionamento
    set rate [$snd cget -rate]
    #ritorno numero di classi temporali 
    return [expr (( double($tm)  * ($rate ) ) / $fftlen) ]    
    
}

 proc BACI::piuFile {w pane} {
    set type {{"Audio" {.wav}}}
    set listaFile [tk_getOpenFile -multiple 1 -title "Seleziona uno o piu file su cui calcolare indice baci" \
                   -filetype $type  ]
 
    set sndSound [snack::sound -file [lindex $listaFile 0]]
    
                                
    [namespace current]::calcoloBaci $w $sndSound $pane $listaFile
}

 proc BACI::piuFileCampionati {w pane sampleLK sampleDK} {
    upvar wsurf::analysis::${pane}::var v
    upvar [namespace current]::agg a
    
    set type {{"Audio" {.wav}}}
    set listaFileAperti [tk_getOpenFile -multiple 1 -title "Seleziona uno o piu file su cui calcolare indice baci" \
                   -filetype $type  ]
    
    file mkdir "tmp" ;#creo cartella dove vengono salvati temporaneamente i campioni dei file
    
    for {set j 0} {$j < [llength $listaFileAperti]} {set j  [expr $j + 1]} {
        
        set sndSound [snack::sound -file [lindex $listaFileAperti $j]]
	
        #dividere file secondo campionamento
        set sndName [lindex $listaFileAperti $j]
        set sndName [string range $sndName [expr 1 +[string last / $sndName ]] [expr [string last . $sndName ] - 1 ]]
        
        #gestione limite per campionamento
        set sampleL [expr int($sampleLK * [$sndSound cget -rate])] ; #ricava numero campioni da secondi
        set sampleD [expr int($sampleDK * [$sndSound cget -rate])] ; #ricava numero campioni da secondi
        
	set inizio [expr int([[namespace current]::strTimeToMs $a(tStart)])  * [$sndSound cget -rate] ]
	
	if { $a(tEnd) == [expr -1]} {
	    
	    set fine [$sndSound length]
	    
	} else {
	    set fine [expr int([[namespace current]::strTimeToMs $a(tEnd)] ) * [$sndSound cget -rate]]
	}
	
	set enum 0
        for {set i $inizio} {$i <= [expr $fine - $sampleL]} {set i  [expr $i + $sampleL + $sampleD]} {                #lm taglio
            
            if  {$i < [expr [$sndSound length] - $sampleL] } {
		set db [open "pp.txt" a+]; #debug append
	
		puts $db "$i \t [expr $i + $sampleL]   \n"
		
		close $db
                set strNum [expr int($i / [$sndSound cget -rate])]
                set strEnd [expr int($strNum + $sampleLK)]
                $sndSound write "tmp\\$sndName\_$strNum-$strEnd.wav" -start $i -end [expr $i + $sampleL]            
                lappend listaFile  "tmp/$sndName\_$strNum-$strEnd.wav"
                
                set enum [expr $enum + 1]
            }
    
        }
    }

    set a(tStart) "00:00.00"
    set a(tEnd) "-1"
    [namespace current]::calcoloBaci $w $sndSound $pane $listaFile
    
    
}